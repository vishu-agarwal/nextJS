import React, { useState } from "react";
import {
  Autocomplete,
  useLoadScript,
  GoogleMap,
  Marker,
  DirectionsRenderer
} from "@react-google-maps/api";
const placesLibrary = ["places"];

function App() {
  const [searchResult, setSearchResult] = useState(null);

  const [map, setMap] = useState(/** @type google.maps.Map */ (null));
  const [directionsResponse, setDirectionsResponse] = useState(null);
  const [distance, setDistance] = useState("");
  const [duration, setDuration] = useState("");

  const [location, setLocation] = useState({
    from: {
      name: "",
      address: "",
      lat: "",
      lng: ""
    },
    to: {
      name: "",
      address: "",
      lat: "",
      lng: ""
    }
  });

  const { isLoaded } = useLoadScript({
    googleMapsApiKey: "AIzaSyABX4LTqTLQGg_b3jFOH8Z6_H5CDqn8tbc",
    libraries: placesLibrary
  });

  // /** @type React.MutableRefObject<HTMLInputElement> */
  // const originRef = useRef();
  // /** @type React.MutableRefObject<HTMLInputElement> */
  // const destiantionRef = useRef();

  // async function calculateRoute() {
  //   if (originRef.current.value === "" || destiantionRef.current.value === "") {
  //     return;
  //   }
  //   // eslint-disable-next-line no-undef
  //   const directionsService = new google.maps.DirectionsService();
  //   const results = await directionsService.route({
  //     origin: originRef.current.value,
  //     destination: destiantionRef.current.value,
  //     // eslint-disable-next-line no-undef
  //     travelMode: google.maps.TravelMode.DRIVING
  //   });
  //   setDirectionsResponse(results);
  //   setDistance(results.routes[0].legs[0].distance.text);
  //   setDuration(results.routes[0].legs[0].duration.text);
  // }

  function onLoad(autocomplete) {
    setSearchResult(autocomplete);
  }

  async function onPlaceChanged(where) {
    if (searchResult != null) {
      //variable to store the result
      const place = searchResult.getPlace();
      setLocation((prev) => {
        return {
          ...prev,
          [where]: {
            name: place.name,
            address: place.formatted_address,
            lat: place.geometry.location.lat(),
            lng: place.geometry.location.lng()
          }
        };
      });
      // variable to store the name from place details result
      const name = place.name;
      //variable to store the status from place details result
      // const status = place.business_status;
      //variable to store the formatted address from place details result
      const formattedAddress = place.formatted_address;
      console.log(place);
      //console log all results
      console.log(`Name: ${name}`);
      console.log(`Formatted Address: ${formattedAddress}`);
      console.log("Lat", place.geometry.location.lat());
      console.log("Lng", place.geometry.location.lng());
      setSearchResult(null);

      if (location.from.name.length && location.to.name.length) {
        const directionsService = new google.maps.DirectionsService();
        const results = await directionsService.route({
          origin: location.from.,
          destination: destiantionRef.current.value,
          // eslint-disable-next-line no-undef
          travelMode: google.maps.TravelMode.DRIVING
        });
        setDirectionsResponse(results);
        setDistance(results.routes[0].legs[0].distance.text);
        setDuration(results.routes[0].legs[0].duration.text);
      }
    } else {
      alert("Please enter source address!");
    }
  }

  if (!isLoaded) {
    return <div>Loading...</div>;
  }

  const center = { lat: 48.8584, lng: 2.2945 };
  return (
    <div className="App">
      <div id="searchColumn">
        <h2>Tide Forecast Options</h2>
        from
        <Autocomplete
          onPlaceChanged={() => onPlaceChanged("from")}
          onLoad={onLoad}
        >
          <input
            type="text"
            placeholder="Search for source"
            style={{
              boxSizing: `border-box`,
              border: `1px solid transparent`,
              width: `240px`,
              height: `32px`,
              padding: `0 12px`,
              borderRadius: `3px`,
              boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,
              fontSize: `14px`,
              outline: `none`,
              textOverflow: `ellipses`
            }}
          />
        </Autocomplete>
        to
        <Autocomplete
          onPlaceChanged={() => onPlaceChanged("to")}
          onLoad={onLoad}
        >
          <input
            type="text"
            placeholder="Search for destination"
            style={{
              boxSizing: `border-box`,
              border: `1px solid transparent`,
              width: `240px`,
              height: `32px`,
              padding: `0 12px`,
              borderRadius: `3px`,
              boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,
              fontSize: `14px`,
              outline: `none`,
              textOverflow: `ellipses`
            }}
          />
        </Autocomplete>
      </div>
      <div>
        <GoogleMap
          center={center}
          zoom={15}
          mapContainerStyle={{ width: "900px", height: "400px" }}
          // options={{
          //   zoomControl: false,
          //   streetViewControl: false,
          //   mapTypeControl: false,
          //   fullscreenControl: false
          // }}
          onLoad={(map) => setMap(map)}
        >
          <Marker position={center} />
          {directionsResponse && (
            <DirectionsRenderer directions={directionsResponse} />
          )}
        </GoogleMap>
      </div>
      {/* <div>
          <GoogleMap
            center={center}
            zoom={10}
            onLoad={map => setMap(map)}
            mapContainerStyle={{ height: "400px", width: "800px" }}
          >
        {this.state.markers.map((mark, index) => ( 
              <Marker position={center} />
             ))} 
          </GoogleMap>
        </div> */}
    </div>
  );
}

export default App;


https://github.com/AjChaudhary000/TrasportGuru/blob/master/TransportGuru/src/components/GoogleDialogBox.js

https://github.com/dixit18/ProService2/blob/main/client/src/components/MapComp/Map.jsx

https://stackoverflow.com/questions/73886703/react-google-maps-api-autocomplete-component-returning-undefined-onplacechanged

https://codesandbox.io/s/autocomplete-sample-forked-vwqqj5?file=/src/App.js

https://stackoverflow.com/questions/70901595/how-to-get-latitude-and-longitude-from-address-using-react-google-places-autocom

